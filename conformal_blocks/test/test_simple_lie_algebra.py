'''
Created on Nov 19, 2016

@author: mjschust
'''
from __future__ import division
import unittest
import conformal_blocks.cbbundle as cbd

class Test(unittest.TestCase):

    def test_sl2_char(self):

        liealg = cbd.TypeALieAlgebra(1)
        wt = tuple([0])
        self.assertEqual(1, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = tuple([1])
        self.assertEqual(2, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = tuple([2])
        self.assertEqual(3, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([2])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

    def test_sl3_char(self):
        liealg = cbd.TypeALieAlgebra(2)
        wt = (0, 0)
        self.assertEqual(1, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([0, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = (1, 0)
        self.assertEqual(3, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = (0, 1)
        self.assertEqual(3, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1, 0])
        self.assertFalse(char_wt in dom_char, "Character incorrect")
        char_wt = tuple([0, 1])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = (1, 1)
        self.assertEqual(8, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1, 1])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([0, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(2, dom_char[char_wt], "Character incorrect")

        wt = (2, 1)
        self.assertEqual(15, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([2, 1])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([1, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(2, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([0, 2])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

    def test_sl4_char(self):
        liealg = cbd.TypeALieAlgebra(3)
        wt = tuple([0, 0, 0])
        self.assertEqual(1, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([0, 0, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = tuple([1, 0, 0])
        self.assertEqual(4, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1, 0, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = tuple([0, 0, 1])
        self.assertEqual(4, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1, 0, 0])
        self.assertFalse(char_wt in dom_char, "Character incorrect")
        char_wt = tuple([0, 0, 1])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = tuple([0, 1, 0])
        self.assertEqual(6, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([0, 1, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")

        wt = tuple([1, 1, 1])
        self.assertEqual(64, liealg.get_rep_dim(wt), "Dimension not correct")
        dom_char = liealg.get_dominant_character(wt)
        char_wt = tuple([1, 1, 1])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(1, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([2, 0, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(2, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([0, 1, 0])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(4, dom_char[char_wt], "Character incorrect")
        char_wt = tuple([0, 0, 2])
        self.assertTrue(char_wt in dom_char, "Character incorrect")
        self.assertEqual(2, dom_char[char_wt], "Character incorrect")

    def test_sl2_tensor(self):
        liealg = cbd.TypeALieAlgebra(1)
        decomp = liealg.tensor((0,), (0,))
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.tensor((0,), (1,))
        dec_wt = tuple([1])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.tensor((1,), (1,))
        dec_wt = tuple([2])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.tensor((2,), (1,))
        dec_wt = tuple([3])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([1])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.tensor((5,), (2,))
        dec_wt = tuple([7])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([5])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([3])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

    def test_sl2_fusion(self):
        liealg = cbd.TypeALieAlgebra(1)
        decomp = liealg.fusion((0,), (0,),1)
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.fusion((0,), (1,), 1)
        dec_wt = tuple([1])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.fusion((1,), (1,),1)
        dec_wt = tuple([2])
        self.assertFalse(dec_wt in decomp, "Tensor decomp incorrect")
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.fusion((1,), (1,),2)
        dec_wt = tuple([2])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.fusion((5,), (2,),7)
        dec_wt = tuple([7])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([5])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([3])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.fusion((5,), (2,),6)
        dec_wt = tuple([7])
        self.assertFalse(dec_wt in decomp, "Tensor decomp incorrect")
        dec_wt = tuple([5])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([3])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.fusion((5,), (2,),5)
        dec_wt = tuple([7])
        self.assertFalse(dec_wt in decomp, "Tensor decomp incorrect")
        dec_wt = tuple([5])
        self.assertFalse(dec_wt in decomp and decomp[dec_wt] > 0, "Tensor decomp incorrect")
        dec_wt = tuple([3])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

    def test_sl2_multi_fusion(self):
        liealg = cbd.TypeALieAlgebra(1)
        wt1 = tuple([0])
        wt2 = tuple([1])
        decomp = liealg.multi_fusion([wt1, wt2, wt2], 1)
        dec_wt = tuple([2])
        self.assertFalse(dec_wt in decomp, "Tensor decomp incorrect")
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        decomp = liealg.multi_fusion([wt2, wt2, wt2], 1)
        dec_wt = tuple([1])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

        wt1 = tuple([4])
        wt2 = tuple([2])
        decomp = liealg.multi_fusion([wt2, wt2, wt2], 4)
        dec_wt = tuple([4])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([2])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(3, decomp[dec_wt], "Tensor decomp incorrect")
        dec_wt = tuple([0])
        self.assertTrue(dec_wt in decomp, "Tensor decomp incorrect")
        self.assertEqual(1, decomp[dec_wt], "Tensor decomp incorrect")

    def test_degree(self):
        liealg = cbd.TypeALieAlgebra(1)
        wt1 = tuple([1])
        wt2 = tuple([3])
        wt3 = tuple([5])
        #self.assertEqual(1, liealg.degree(wt1,wt2,wt2,wt3, 5), "Degree incorrect")
        #self.assertEqual(0, liealg.degree(wt1, wt2, wt2, wt3, 6), "Degree incorrect")

        liealg = cbd.TypeALieAlgebra(4)
        wt1 = tuple([0, 1, 0, 0])
        wt2 = tuple([0, 0, 1, 0])
        #self.assertEqual(2, liealg.degree(wt1, wt1, wt2, wt2, 1), "Degree incorrect")




if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.testSL2OrbitIter','Test.testSL2Tensor','Test.testSL2Fusion','testSL2MultiFusion','testDegree']
    unittest.main()